//
// Created by Diaz, Diego on 22.9.2022.
//

#include <vector>
#include "file_streams.hpp"
#include "bwt_io.h"

int main(int argc, char** argv) {

    if (argc != 5) {
        std::cout << "usage: ./reverse_bwt file.rlbwt output_prefix\n\n"
                     "file.rlbwt: the BCR BWT file generated by grlBWT\n"
                     "output_prefix: output prefix for the RLE files" << std::endl;
        exit(0);
    }

    errno = 0;
    std::string input_file = std::string(argv[1]);
    std::string output_prefix = std::string(argv[2]);

    o_file_stream<uint32_t> r_lens(output_prefix+".len", 1024*1024, std::ios::out);
    o_file_stream<uint8_t> r_syms(output_prefix+".syms", 1024*1024, std::ios::out);

    size_t sym_freqs[256]={0};
    bwt_buff_reader bwt_reader(input_file);
    size_t r_sym=0, r_len=0;
    for(size_t i=0;i<bwt_reader.size();i++) {
        bwt_reader.read_run(i, r_sym, r_len);
        sym_freqs[r_sym] = r_len;
    }

    size_t C[256]={0};
    size_t acc=0, tmp;
    for(size_t i=0; i<256; i++){
        tmp = sym_freqs[i];
        C[i] = acc;
        acc += tmp;
        sym_freqs[i] = 0;
    }

    size_t lf, bucket=0, freq, j=0;
    for(size_t i=0;i<bwt_reader.size();i++) {
        bwt_reader.read_run(i, r_sym, r_len);

        while(r_len>0){
            if(j>C[bucket+1]){
                freq = std::min(C[bucket+1]-C[bucket], r_len);
                bucket++;
            }else{
                if(r_sym!=bucket){
                    lf = C[r_sym] + sym_freqs[r_sym];
                }
            }

            j += freq;
            r_len-=freq;
        }
    }

    r_lens.close();
    r_syms.close();
    bwt_reader.close();
}
